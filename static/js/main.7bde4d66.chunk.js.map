{"version":3,"sources":["Previewer.js","Editor.js","useInput.js","App.js","serviceWorker.js","index.js"],"names":["Previewer","text","markedText","marked","console","log","class","id","dangerouslySetInnerHTML","__html","Editor","initialVal","useState","value","setValue","e","target","useInput","updateText","resetText","for","className","name","onChange","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+UAeeA,MAXf,YAA8B,IAATC,EAAQ,EAARA,KACfC,EAAaC,IAAOF,GAExB,OADAG,QAAQC,IAAIH,GAEV,oCACE,wBAAII,MAAM,QAAV,aACA,yBAAKC,GAAG,UAAUC,wBAAyB,CAAEC,OAAQP,O,MCkD5CQ,MAvDf,WACE,IADgB,ECHH,SAACC,GAAgB,IAAD,EACHC,mBAASD,GADN,mBACtBE,EADsB,KACfC,EADe,KAQ7B,MAAO,CAACD,EANa,SAACE,GACpBD,EAASC,EAAEC,OAAOH,QAEN,WACZC,EAAS,MD6B2BG,CA/BtB,svBADA,mBAgCThB,EAhCS,KAgCHiB,EAhCG,KAgCSC,EAhCT,KAiChB,OACE,oCACE,2BAAOC,IAAI,SAASC,UAAU,OAA9B,UAGA,8BACEd,GAAG,SACHe,KAAK,SACLT,MAAOZ,EACPsB,SAAUL,IAEZ,uBAAGX,GAAG,cACJ,4BAAQiB,QAASL,EAAWZ,GAAG,UAA/B,UAKF,kBAAC,EAAD,CAAWN,KAAMA,ME3CRwB,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,QCKcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.7bde4d66.chunk.js","sourcesContent":["import React from 'react';\r\nimport marked from 'marked';\r\nimport './Previewer.css';\r\n\r\nfunction Previewer({ text }) {\r\n  var markedText = marked(text);\r\n  console.log(markedText);\r\n  return (\r\n    <>\r\n      <h1 class='nav2'>Previewer</h1>\r\n      <div id='preview' dangerouslySetInnerHTML={{ __html: markedText }}></div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Previewer;\r\n","import React from 'react';\r\nimport useInput from './useInput';\r\nimport Previewer from './Previewer';\r\nimport './Editor.css';\r\n\r\nfunction Editor() {\r\n  const initialVal = `\r\n# Welcome to my React Markdown Previewer!\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n      \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\n\\`\\`\\`\r\nconst a = []\r\n\\`\\`\\`\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\n\r\n* And of course there are lists.\r\n  * Some are bulleted.\r\n    * With different indentation levels.\r\n      * That look like this.\r\n    \r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n    \r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`;\r\n  const [text, updateText, resetText] = useInput(initialVal);\r\n  return (\r\n    <>\r\n      <label for='editor' className='nav'>\r\n        Editor\r\n      </label>\r\n      <textarea\r\n        id='editor'\r\n        name='editor'\r\n        value={text}\r\n        onChange={updateText}\r\n      ></textarea>\r\n      <p id='buttonArea'>\r\n        <button onClick={resetText} id='button'>\r\n          Reset\r\n        </button>\r\n      </p>\r\n\r\n      <Previewer text={text} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Editor;\r\n","import { useState } from 'react';\r\n\r\nexport default (initialVal) => {\r\n  const [value, setValue] = useState(initialVal);\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setValue('');\r\n  };\r\n  return [value, handleChange, reset];\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport Editor from './Editor';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}